# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

%include "common.conf"

######## file classes ##########
FileClass scratch_files {
    definition { type == file and tree == "/mnt/lustre/scratch" 
                 and not tree == "/mnt/lustre/scratch/tmp" }
    report = yes; # (default)
}

FileClass scratch_tmp_files {
    definition { type == file and tree == "/mnt/lustre/scratch/tmp" }
    report = yes; # (default)
}

FileClass files1 {
    definition { type == file and name == "*1" }
    report = yes; # (default)
}

FileClass files2 {
    definition { type == file and name == "*2" }
    report = yes; # (default)
}

FileClass files3 {
    definition { type == file and name == "*3" }
    report = yes; # (default)
}

FileClass foo_files {
    definition { type == file and name == "*.foo" }
    report = yes; # (default)
}

FileClass bar_files {
    definition { type == file and name == "*.bar" }
    report = yes; # (default)
}

FileClass root_files {
    definition { type == file and owner == root }
    report = yes; # (default)
}

FileClass default_files {
    definition { type == file and tree != "/mnt/lustre/scratch" and
        name != "*.foo" and name != "*.bar" and owner != root }
    report = yes; # (default)
}

#### Deleting old unused files in scratch#######

migration_parameters {
    nb_threads = 4;

    # max_action_volume  = 10TB;
    # max_action_count   = 380000;
    # db_result_size_max = 300000;
    lru_sort_attr      = creation;

    # suspend policy run if action error rate > 50% (after 100 errors)
    suspend_error_pct  = 50%;
    suspend_error_min  = 100;
    report_actions     = yes;
    queue_size         = 4096;

    report_interval    = 10min;
    # action_timeout     = 2h;


    # check_actions_on_startup= no
    # check_actions_interval  = 0 # (disabled)
    # recheck_ignored_entries = no
    # pre_maintenance_window  = 0 # (disabled)
    # maint_min_apply_delay   = 30min

}

migration_rules {
    ignore { owner == tutu or owner == babar }
    ignore_fileclass = foo_files;
    ignore_fileclass = bar_files;

    rule scratch_migration {
        target_fileclass = scratch_files;
        condition { (last_access > 1h and last_mod > 1h) or last_archive == 0 }
    }

    rule nocond_migration1 {
        target_fileclass = files1;
        condition = true;
    }

    rule nocond_migration2 {
        target_fileclass = files2;
        target_fileclass = files3;
        condition = true;
    }

    rule scratch_tmp_migration {
        target_fileclass = scratch_tmp_files;
        target_fileclass = root_files;
        condition {(last_archive == 0 and creation > 7d and last_mod > 1h)
		   or last_archive > 7d}
    }

    rule default {
        condition {(last_archive == 0 and creation > 7d and last_mod > 1h)
		   or last_archive > 7d}
    }
}

migration_trigger {
    trigger_on = periodic;
    check_interval = 24h;
}

