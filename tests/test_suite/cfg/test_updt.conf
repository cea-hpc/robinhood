# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

# TEST: - check on_event_periodic path update when processing changelogs
#       - check on_event_periodic md update when processing changelogs
#       - check periodic fileclass matching

General
{
	fs_path = $RH_ROOT;
	fs_type = $FS_TYPE;
}

# ChangeLog Reader configuration
# Parameters for processing MDT changelogs :
ChangeLog
{
    # 1 MDT block for each MDT :
    MDT
    {
        # name of the first MDT
        mdt_name  = "MDT0000" ;

        # id of the persistent changelog reader
        # as returned by "lctl changelog_register" command
        reader_id = "cl1" ;
    }
    force_polling = TRUE;
    polling_interval = 1s;

    # batch log records 1sec max
    queue_max_age = 1;
}

Log
{
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT;

    # Log file
    log_file = stdout;

    # File for reporting purge events
    report_file = "/dev/null";

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/tmp/rh_alert.log";

}

ListManager
{
	MySQL
	{
		server = "localhost";
		db = $RH_DB;
        user = "robinhood";
		# password or password_file are mandatory
		password = "robinhood";
        engine = InnoDB;
	}

	SQLite {
	        db_file = "/tmp/robinhood_sqlite_db" ;
        	retry_delay_microsec = 1000 ;
	}
}

# for tests with backup purpose
backup_config
{
    root = "/tmp/backend";
    mnt_type=ext4;
    check_mounted = FALSE;
    recovery_action = common.copy;
}
# for tests with shook purpose
shook_config
{
    root = "/tmp/backend";
    mnt_type=ext4;
    check_mounted = FALSE;
    recovery_action = common.copy;
}


db_update_params
{
    # 2nd number must be > 4x(1st number)
    # 14s > 4x3s
    path_update = on_event_periodic(3s,14s);
    md_update   = on_event_periodic(3s,14s);
    fileclass_update = periodic(5s);
}

%include "$RBH_TEST_POLICIES"

fileclass to_be_ignored
{
    definition { name == "ign*"}
}

fileclass to_be_migr
{
    definition { name == "migr*"}
}

fileclass to_be_released
{
    definition { name == "purg*"}
}

migration_parameters
{
    recheck_ignored_entries = yes;
}

migration_rules
{
   ignore { name == "whitelist*" }
   ignore_fileclass = to_be_ignored;

   policy migr_match
   {
        target_fileclass = to_be_migr;
        condition { last_mod >= 0 }
   }

   policy default
   {
        condition { last_mod >= 0 }
   }
}

purge_parameters
{
    recheck_ignored_entries = yes;
}

purge_rules
{
   ignore { name == "whitelist*" }
   ignore_fileclass = to_be_ignored;

   policy purge_match
   {
        target_fileclass = to_be_released;
        condition { last_access >= 0 }
   }

   policy default
   {
        condition { last_access >= 0 }
   }
}

EntryProcessor
{
    # don't match when scanning
    match_classes = FALSE;
}
