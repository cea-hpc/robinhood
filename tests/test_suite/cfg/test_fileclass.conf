# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

# TEST: - Fileset definition based on filename
#       - Migration params
#       - Migration policy using filesets

%include "common.conf"

FileClass even_files
{
    Definition { name == "*[02468]" }
    migration_action_params {class="{fileclass}";}
    report = no;
}

FileClass odd_files
{
    Definition { name == "*[13579]" }
    migration_action_params {class="{fileclass}";}
    report = no;
}

FileClass in_dir_A
{
    definition { tree == "/mnt/lustre/dir_A/" }
    migration_action_params {class="{fileclass}" ; archive_id=1;}
    report = no;
}

FileClass in_dir_B
{
    definition { tree == "/mnt/lustre/dir_B" }
    migration_action_params {class="{fileclass}"; archive_id = 1; }
    report = no;
}

FileClass odd_or_A
{
    definition { odd_files UNION in_dir_A }
    migration_action_params {class="{fileclass}"; archive_id = 1; }
}

FileClass even_and_B
{
    definition { even_files INTER in_dir_B }
    migration_action_params {class="{fileclass}"; archive_id = 1; }
}

FileClass even_and_not_B
{
    definition { even_files INTER NOT in_dir_B }
    migration_action_params {class="{fileclass}"; archive_id = 1; }
}


######## Policies for this test ###########

migration_rules
{

    # migrate files based on INTER => matched first
    policy inter_migr
    {
        target_fileclass = even_and_B;
        condition { last_mod > 1s }
    }

    # migrate files based on inter not
    policy not_migr
    {
        target_fileclass = even_and_not_B;
        condition { last_mod > 1s }
    }

    # migrate files based on UNION
    policy union_migr
    {
        target_fileclass = odd_or_A;
        condition { last_mod > 1s }
    }

    # migrate other files after 45s
    policy default
    {
        condition { last_mod > 1s }
        action_params {class = "unmatched"; archive_id=1;}
    }

}

######## most basic space release policy ##########

purge_rules
{
    policy default
    {
        # We can release files that have not been accessed
        # for more than a day
        condition
        {
            last_access > 1h
        }
    }
}

####### Purge trigger ########

# trigger purge on OST if its usage exceeds 85%
purge_trigger
{
    trigger_on         = OST_usage ;
    high_threshold_pct = 85% ;
    low_threshold_pct  = 80% ;
    check_interval     = 5min ;
}
