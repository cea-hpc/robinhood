# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:
%include "common.conf"

define_policy lhsm_archive {
    scope { type == file
            and no_archive != 1
            and (status == new or status == modified) }
    status_manager = lhsm(archive);
    status_current = archiving;
    default_action = lhsm.archive;
    default_lru_sort_attr = last_mod;
}

lhsm_archive_parameters {
    nb_threads = 8;

    max_action_volume  = 10TB;
    max_action_count   = 380000;
    db_result_size_max = 100000;
    # lru_sort_attr      = default_lru_sort_attr;  # (from 'define_policy' block)

    # suspend policy run if action error rate > 50% (after 100 errors)
    suspend_error_pct  = 50%;
    suspend_error_min  = 100;
    report_actions     = yes;
    queue_size         = 4096;

    report_interval    = 10min;
    action_timeout     = 2h;

    # overrides policy default action
    # action = cmd("lfs hsm_archive --archive {archive_id} /lustre/.lustre/fid/{fid}");

    # check_actions_on_startup= no
    # check_actions_interval  = 0 # (disabled)
    # recheck_ignored_entries = no
    # pre_maintenance_window  = 0 # (disabled)
    # maint_min_apply_delay   = 30min

    # default action parameters
    action_params {
        archive_id = 1;
    }
}

lhsm_archive_rules {
    rule archive_std {
        target_fileclass = lustre_files;
        condition {
            last_mod > 1 AND
            ((last_archive == 0 and creation > 4h)
              OR (last_archive > 1d and last_mod > 8h))
             AND
             last_access > 1
        }
    }
}

lhsm_archive_trigger {
    trigger_on = periodic;
    check_interval = 60min;
}

FileClass empty_files {
    definition { type == file and size == 0}
    # report = yes (default)
}

FileClass lustre_files {
    definition { type == file and size > 0}
    # report = yes (default)
}
