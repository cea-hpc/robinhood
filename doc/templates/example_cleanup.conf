# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

General {
	fs_path = /mnt/lustre;
	fs_type = lustre;
}

#### policy definitions ####

# include template policy definitions for legacy TMPFS flavor
%include "includes/tmpfs.inc"

#### fileclass definitions ####

FileClass even_files {
    definition { type == file and name == "*[02468]" }
    # only for policy matching, not to display in reports
    report = no;
}

FileClass odd_files {
    definition { type == file and name == "*[13579]" }
    report = no;
}

# fileclasses to display in reports (can still be used in policies)
FileClass empty_files {
    definition { type == file and size == 0 }
    # report = yes (default)
}
FileClass small_files {
    definition { type == file and size > 0 and size <= 16MB }
    # report = yes (default)
}
FileClass std_files {
    definition { type == file and size > 16MB and size <= 1GB }
}
FileClass big_files {
    definition { type == file and size > 1GB }
}

FileClass largedir {
    definition { type == directory and dircount > 10000 }
}

FileClass f1 {
    definition { type == file and name == "file.1" }
}

FileClass f2 {
    definition { type == file and name == "file.2" }
}


#### Deleting old unused files #######

cleanup_rules {

    ignore { last_mod < 1d }
    ignore_fileclass = empty_files;

    rule clean_f {
        target_fileclass = f1;
        target_fileclass = f2;

        condition { last_access > 100d }
    }


    # rule for other entries
    rule default {
        condition { last_access > 30d }
    }
}

# clean when inode count > 100M
cleanup_trigger {
    trigger_on = global_usage;
    high_threshold_cnt = 100M;
    low_threshold_cnt  = 100M;
    check_interval     = 5min;
}

########### end of policy rules ############


# ChangeLog Reader configuration
# Parameters for processing MDT changelogs :
ChangeLog {
    # 1 MDT block for each MDT :
    MDT {
        # name of the first MDT
        mdt_name  = "MDT0000" ;

        # id of the persistent changelog reader
        # as returned by "lctl changelog_register" command
        reader_id = "cl1" ;
    }
    polling_interval = 1s;
}

Log {
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT;

    # Log file
    log_file = "/var/log/robinhood/lustre.log";

    # File for reporting purge events
    report_file = "/var/log/robinhood/lustre_actions.log";

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/var/log/robinhood/lustre_alerts.log";
    alert_show_attrs = yes;
}

ListManager {
	MySQL {
		server = "localhost";
		db = "robinhood_lustre";
        user = "robinhood";
		# password or password_file are mandatory
		password = "robinhood";
        engine = innodb;
	}
}
